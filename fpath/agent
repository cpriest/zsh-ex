#!/bin/zsh
setopt NO_FUNCTION_ARGZERO LOCAL_OPTIONS;

() {
	[[ -t 0 ]] || {
		echo -e "\n--- STARTING UID=$UID --------\n" >&2;
		echo "	-t 0 failed \$UID=$UID" >&2;
		echo -e "\n--- ENDING ---------------\n" >&2;
		return;
	}

	setopt LOCAL_OPTIONS LOCAL_TRAPS;

	local SF=${(%):-%x};
	local SD=${SF:h};
	local SSH_ENV="$HOME/.ssh/agent-environment-$USER";

	source "$ZEX_DIR/lib/scripts.zsh" 2>/dev/null ||
		{ echo "Could not source zsh-ex/lib/scripts.zsh, is zsh-ex installed?"; exit 1; }

##																									\e[m
##	agent [options]
##		Loads active agent or starts agent and prompts for ssh key automatically.
##																									\e[m
##		\e[31;1moptions\e[m
##			-h		  Shows this help information
##			-v		  Increases verbosity, may be repeated multiple times
##

	# Parse the options passed in, this needs to match the options listed in the help file, see `man zshmodule` for details
	zparseopts -D -E v+=VERBOSITY h=HELP ||
		help;

	# Capture the verbosity number (number of -vvv's)
	VERBOSITY=${#VERBOSITY}

	# Display help if requested
	[[ "$HELP" ]] &&
		help;

	# Called on exit from this point forward
	on_exit() {

	}
	trap on_exit EXIT;

	echo -e "\n--- STARTING UID=$UID --------\n" >&2;


	function agent_is_running() {

	}

	# Tests whether the current environment variables have a valid/accessible SSH_AUTH_SOCK
	# Presently this assumes that the socket file, if it exists and is readable/writable, then
	# it is valid which appears to be the case with local agents
	function agent_environment_is_valid() {
		echo "agent_environment_is_valid()" >&2;

		echo "	\$UID=$UID, \$SSH_AUTH_SOCK = '$SSH_AUTH_SOCK'" >&2;
		[[ -n "$SSH_AUTH_SOCK" ]] &&
			\ls -alh --color $SSH_AUTH_SOCK >&2;
		# if [[ -r "$SSH_AUTH_SOCK" ]] {
		# 	echo "	-r \$SSH_AUTH_SOCK is true"
		# } else {
		# 	echo "	-r \$SSH_AUTH_SOCK is false"
		# }
		# if [[ -w "$SSH_AUTH_SOCK" ]] {
		# 	echo "	-w \$SSH_AUTH_SOCK is true"
		# } else {
		# 	echo "	-w \$SSH_AUTH_SOCK is false"
		# }
		echo >&2;

		# Must be able to read/write to SSH_AUTH_SOCK or environment is not valid
		[[ -r "$SSH_AUTH_SOCK" ]] || { echo -e "	Returning Invalid (-r)" >&2; return 1; }
		[[ -w "$SSH_AUTH_SOCK" ]] || { echo -e "	Returning Invalid (-w)" >&2; return 1; }

		echo -e "	Returning Valid\n" >&2;

		return 0;
	}

	# Starts an ssh-agent if it can obtain the lockfile, otherwise it returns immediately
	function start_single_agent() {
		(
			# If we can't get the lock, exit sub-shell
			flock -n 9 || exit 1;

			sleep 3;	# Temporary for testing

			# We have the lock, start an agent
			echo "\e[38;5;51mStarted new SSH agent.\e[m";
			/usr/bin/ssh-agent | perl -pe 's/^echo.+$//' > "${SSH_ENV}";
			chmod 600 "${SSH_ENV}";

			# Remove the lock file
			rm ${SSH_ENV}-lock;
		) 9>${SSH_ENV}-lock
	}

	# If there is a readable SSH_ENV file, load it
	function load_env() {
		[[ -r "${SSH_ENV}" ]] || {
			echo -e "\nload_env() - ${SSH_ENV} not readable.\n" >&2;
			return 1;
		}

		echo "Loading ssh environment: ${SSH_ENV}" >&2;
		\ls -alh --color ${SSH_ENV} >&2;
		source "${SSH_ENV}" >& /dev/null
		echo >&2;
	}

	# Retries repeatedly to obtain a lock and if obtained, starts the agent
	#	If unable to obtain the lock, then sleep a bit and try to load
	function try_start_agent_forever() {
		# retry until a break condition
		while [[ true ]] {
			# try and load the environment
			load_env &&
				# If we now have a valid environment, break from loop
				agent_environment_is_valid &&
					break;

			# Otherwise try and start the agent (flock protected)
			start_single_agent || {
				# Not allowed to start the agent
				sleep 2;
				echo "Could not obtain the lock, trying loop again." >&2;
			}

			# Let it re-loop, to load & test
		}
		echo "Presumably, we have a valid, usable agent loaded into the environment, details:";
		{
			echo "\$UID=$UID, \$SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
			\ls -alh --color $SSH_AUTH_SOCK;
		} |& perl -pe 's#^#\t#'
	}

	# Assertion that the agent has loaded keys
	function agent_has_keys() {
		# Returns exit code 0 if keys are loaded
		ssh-add -L >& /dev/null
	}

	# While the agent does not have any keys, try to add them
	function try_add_keys_forever() {
		echo "try_add_keys_forever()" >&2
		COUNT=0;
		while [[ true ]] {
			echo "In While Loop" >&2
			agent_has_keys &&
				echo "breaking from loop" >&2 &&
				break;

			echo "\e[38;5;51mAdding ~/.ssh/id_rsa to ssh-agent.\e[m";
			timeout 300s /usr/bin/ssh-add ~/.ssh/id_rsa > /dev/null || {
				echo "\e[31m    Failed to add ~/.ssh/id_rsa to ssh-agent, giving up.\e[m";
				break;
			}
			sleep 1;
		}
	}

	# If vsh.exe is available, we'll use that and rely on Activator
	\which vsh.exe >&/dev/null && 
		return;

	which ssh-agent >&/dev/null || {
		vmsg 1 "No ssh-agent executable found, stopping.";
		return;
	}

	# If agent environment isn't valid, then
	agent_environment_is_valid ||
		try_start_agent_forever;

	agent_environment_is_valid &&
		try_add_keys_forever;

	# start_agent_save_environment()
	# 	acquire start agent lock
	# 	start agent
	# 	save to disk & environment
	# 	add keys to agent
	# 	maybe release lock?  Or maybe release lock after ssh-add

	# IF agent is not in environment
	# 	 load environment from disk

	# IF agent environment is not valid then
	# 	start_agent_save_environment()

	echo -e "\n--- ENDING ---------------\n" >&2;

} "$@" 2>/dev/null
