#!/bin/zsh
#setopt NO_FUNCTION_ARGZERO LOCAL_OPTIONS;

#
#	TODO:
#		Does above setopt LOCAL_OPTIONS work for a sourced file
#		  --> No, it doesn't, but it does at the function level
#

() {
	setopt LOCAL_OPTIONS LOCAL_TRAPS;

	local SF=${(%):-%x};
	local SD=${SF:h};

##																									\e[m
##	de [options] [container] [--] [cmd]
##		Executes the given command in the container as described below.  [cmd] will be expanded if
##	    necessary to resolve any alias, assumes PWD matches the container.
##																									\e[m
##	    \e[31;1m[container]\e[m
##	    If no -c option is given and no DE_CONTAINER environment variable is set, the first
##	    argument will be used as the container name.  If the container name is not an exact match, a
##	    loose match will be attempted.  If the container name is not found, an error will be thrown.
##																									\e[m
##		\e[31;1moptions\e[m
##			Any of the options available to docker exec, -t -i assumed
##																									\e[m
##			-h		  Shows this help information
##			-v		  Increases verbosity, may be repeated multiple times
##																									\e[m
##			-H		  Shows help information for \e[37;1mdocker help exec\e[m
##																									\e[m
##			-c \e[32;1mname\e[m   Use \e[32;1mname\e[m as the container instead of \e[37;1m$DE_CONTAINER\e[m
##			-C \e[32;1mname\e[m   Set the \e[37;1m$DE_CONTAINER\e[m to \e[32;1mname\e[m
##				  		  Example: de -C blah sets the DE_CONTAINER environment variable to blah
##																									\e[m
##			-n		  Do not perform expansion on \e[32;m{cmd}\e[m
##			-N		  Do not loosly match container name on \e[32;m-c\e[m
##

	TRAPABRT() { return $(( 128 + $1 )); }

	local DOCKER='docker';
	[[ "$SUDO_USER" = "" ]] &&
		DOCKER="sudo -E $DOCKER";

	help() {
		print -l "`cat $SF | \pcregrep -o1 '^##\t(.+)$'`";
		kill -ABRT $$;
	}

	error() {
		echo "\e[31;1m$@\e[m";
		kill -ABRT $$;
	}

	vmsg() {
		[[ $1 > $VERBOSITY ]] &&
			return;
		shift;	# Drop $1
		echo $*;
	}

	zparseopts -D -E v+=VERBOSITY h=HELP H=_DE_HELP n=NO_EXPANSION N=NO_LOOSE c:=_CONTAINER C:=_CONTAINER_EXPORT d=_DE_OPTS i=_DE_OPTS -privileged=_DE_OPTS t=_DE_OPTS u:=_DE_OPTS ||
		help;

	VERBOSITY=${#VERBOSITY}

	[[ "$_DE_HELP" ]] && {
		docker help exec;
		kill -ABRT $$;
	}

	[[ "$HELP" ]] &&
		help;

	# Prefer -C > -c > $DE_CONTAINER
	CONTAINER=${_CONTAINER_EXPORT[2]-${_CONTAINER[2]-$DE_CONTAINER}}

	if [[ $_CONTAINER_EXPORT ]] {
		# Can't export to calling shell like this, look into it later @bugfix
		export DE_CONTAINER=${_CONTAINER_EXPORT[2]};
		echo "\`export DE_CONTAINER=${_CONTAINER_EXPORT[2]}\`";
		[[ ${#*} = 0 ]] && kill -ABRT $$;
	}

	DE_OPTS=($_DE_OPTS -ti)

	# If we have no CONTAINER yet, try to use the first argument
	[[ -z "$CONTAINER" ]] && {
		CONTAINER=$1;
		shift;
	}

	[[ -z "$CONTAINER" ]] && error "No container specified via -c or \$DE_CONTAINER environment variable";

	if [[ -z $NO_LOOSE ]] {
		_CONTAINER=`$DOCKER ps -a --format '{{.Names}}' | \grep -Pi "$CONTAINER" | head -n 1`;
		[[ -n "$_CONTAINER" ]] && {
			vmsg 1 "Expanded $CONTAINER to container $_CONTAINER";
			CONTAINER=$_CONTAINER;
		}
	}

	# Verify we have a valid container
	$DOCKER ps -a --format '{{.Names}}' | \grep -Pi "$CONTAINER" > /dev/null ||
		error "Could not find container with '$CONTAINER'";

	# Detect shells available in container
	_SHELL=$($DOCKER exec ${CONTAINER} sh -c 'type -p zsh bash sh 2>/dev/null' | grep -v "not found" | head -n 1);
	[[ -z "$_SHELL" ]] &&
		error "Could not detect shell in container (via \`which zsh bash sh\`)";
	_SHELL=${_SHELL##*/};

	# Drop -- if it's the first parameter
	[[ $1 == "--" ]] && shift;

	[[ ${#*} = 0 ]] &&
		set $_SHELL;

	# Attempt to expand aliases, functions, etc
	if [[ -n $NO_EXPANSION ]] {
		EXEC_CMD="$1";
	} else {
		EXEC_CMD="${1:c:t}";

		# If expanding $1 as a command (:c) is the same as $1
		if [[ "${1:c}" == "$1" ]] {
			# And $1 does not exist as a file
			if [[ ! -e "$1" ]] {
				# Stuff the command in a function, which will expand it as per normal, then read it back out
				functions[__de_exec_expand]=$EXEC_CMD;
				EXEC_CMD="${functions[__de_exec_expand]//$'\t'/}";
				[[ -z "$EXEC_CMD" ]] &&
					error "Could not resolve $1 to a valid command using regular expansion.";
			}
		}
	}
	# Remove the first argument, its now resolved to $EXEC_CMD
	shift;


	case $_SHELL {
		zsh)
			RCFILE=~/.zshrc;
			PROFILE_FN=.zsh_profile;
			;;
		bash)
			RCFILE=~/.bashrc;
			PROFILE_FN=.bash_profile;
			;;
		sh)
			RCFILE='';
			PROFILE_FN=.profile;
			;;
	}

	TMP=`mktemp`;
	{
		# `alias -rL | grep "'"`;
		cat <<-EOF
			`emulate $_SHELL -c 'export -p' | \pcregrep -v '^export (-|(SHELL|SHLVL|SUDO_|PWD|OLDPWDSUDO_|SSH_TTY|LESSOPEN|LOGNAME|USER|USERNAME|PATH|HOME)[^=]*=)'`;
		EOF

		[[ -n "$RCFILE" ]] && {
			cat <<-EOF
				[[ -e $RCFILE ]] && source $RCFILE;
			EOF
		}

		cat <<-EOF
			cd ~;	# Fallback to home directory in case final cd doesn't work
			cd $PWD;
		EOF

		[[ -n "$EXEC_CMD" ]] && {
			cat <<-EOF
				$EXEC_CMD ${(@q)*}; 
				exit \$?;
			EOF
		}
	} >> $TMP;

	trap on_exit EXIT;

	[[ -n "$RCFILE" ]] &&
		eval "$DOCKER cp $RCFILE $CONTAINER:/root/${RCFILE##*/}";
		
	[[ -n "$PROFILE_FN" ]] &&
		eval "$DOCKER cp $TMP $CONTAINER:/root/$PROFILE_FN";

	CMD="$DOCKER exec ${DE_OPTS} ${CONTAINER} $_SHELL -li";

	if [[ $VERBOSITY > 1 ]] {
		vmsg 1 $CMD;
		vmsg 1 "";
		echo "\e[37;1mScript to be executed in container:\e[m";
		cat $TMP | nl;
		echo "-----------------------------------------------------------------------------";
	}
	eval $CMD;

	on_exit() {
		rm $TMP;
	}
} "$@";
